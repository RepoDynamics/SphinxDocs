name: 'RepoDynamics SphinxDocs'
description: 'Build and deploy Sphinx documentations.'
author: 'Armin Ariamajd'
branding:
  icon: file-text
  color: blue


inputs:

  checkout-ref:
    description: Reference to checkout, i.e. the `ref` input of `actions/checkout`.
    default: ""
    required: false

  deploy:
      description: |
        Whether to deploy the documentation; either `true` or `false`.
      default: 'false'
      required: false


outputs:

  url:
    description: URL of the deployed website on GitHub Pages.
    value: ${{ steps.deploy.outputs.url }}


runs:
  using: "composite"
  steps:

    - name: 'Initialize'
      shell: bash
      run: |
        # Initialize
        printf "\n\n$(cat ${{github.action_path}}/logo.txt)\n\n\n"
        echo -e "\033[1;30;48;2;0;162;255m 1. Initialize  "

    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        ref: ${{ inputs.checkout-ref }}

    - name: 'Setup conda environment'
      # https://github.com/mamba-org/setup-micromamba
      uses: mamba-org/setup-micromamba@v1
      with:
        environment-file: docs/website/requirements.yaml
        cache-environment: true
        cache-environment-key: sphinx-website-requirements
        generate-run-shell: true
        init-shell: bash


    - name: 'Display directory tree'
      shell: bash -el {0}
      run: ls -laR


    #      # To make PDF output, we need the latexmk package and some other plugins, which are not available via conda.
    #      - name: 'Install extra requirements'
    #        # Ref:
    #        #   https://fontawesome.com/docs/web/setup/packages#the-free-package
    #        #   https://github.com/sphinx-doc/sphinx-docker-images/tree/master
    #        run: >-
    #          sudo apt-get update -y
    #
    #          sudo apt-get install --no-install-recommends -y
    #          graphviz
    #          imagemagick
    #          latexmk
    #          lmodern
    #          texlive-xetex
    #          texlive-luatex
    #          texlive-latex-recommended
    #          texlive-latex-extra
    #          texlive-fonts-recommended
    #          fonts-font-awesome
    #          texlive-fonts-extra
    #          fonts-freefont-otf
    #          tex-gyre
    #          xindy
    #
    #          npm install --save @fortawesome/fontawesome-free


    #      - name: 'Display non-Python packages'
    #        run: |
    #          echo "latexmk Version:"
    #          latexmk --version
    #          echo "rsvg Version:"
    #          rsvg-convert --version




    - name: 'Install RepoDynamics'
      shell: micromamba-shell {0}
      run: |
        # Install requirements
        echo -e "::group::\033[1;38;2;0;162;255mInstall RepoDynamics"
        pip install -r meta/requirements.txt
        echo "::endgroup::"
        
        if [ -f "pyproject.toml" ]; then
            echo -e "::group::\033[1;38;2;0;162;255mInstall local package"
            pip install .
            echo "::endgroup::"
        fi
        echo -e "::group::\033[1;38;2;0;162;255mInstalled packages"
        pip list
        echo "::endgroup::"

    - shell: bash -el {0}
      run: |
        echo -e "::group::\033[1;38;2;0;162;255mInstall local package"
        micromamba list
        echo "::endgroup::"

    - name: 'Build HTML'
      shell: micromamba-shell {0}
      run: |
        cd docs/website
        echo -e "::group::\033[1;38;2;0;162;255mBuild HTML"
        make clean dirhtml
        echo "::endgroup::"        
        mv _build/dirhtml _build/html
        echo -e "::group::\033[1;38;2;0;162;255mDisplay ordered builds"
        find docs/website/_build
        echo "::endgroup::"        
    

##      - name: 'Build LaTeX'
##        if: always()
##        run: |
##          cd docs/website
##          make latexpdf
#
#      - name: 'Build LaTeX'
#        if: always()
#        # Use `make latex` instead of `make latexpdf` to be able to pass extra arguments to `latexmk` in next step.
#        run: |
#          cd docs/website
#          make latex
#
#      - name: 'Build PDF'
#        if: always()
#        # latexmk docs: https://ctan.mc1.root.project-creative.net/support/latexmk/latexmk.pdf
#        run : |
#          cd docs/website/_build/latex
#          LATEXMKOPTS="-outdir=./pdf -auxdir=./aux -bibfudge- -makeindexfudge-" make
#
#      - name: 'Display builds'
#        if: always()
#        run: find docs/website/_build
#
#      - name: 'Order builds'
#        if: always()
#        run : |
#
#          mkdir -p docs/website/_build/pdf/log
#          mv docs/website/_build/latex/aux docs/website/_build/pdf
#          mv docs/website/_build/latex/pdf/* docs/website/_build/pdf/log
#          mv docs/website/_build/pdf/log/*.pdf docs/website/_build/pdf




    - name: 'Upload builds'
      if: ${{ !cancelled() }}
      uses: actions/upload-artifact@v3
      with:
        path: docs/website/_build/*
        name: 'docs'

    # Ref: https://github.com/actions/starter-workflows/blob/main/pages/static.yml
    # Ref: https://docs.github.com/en/pages/getting-started-with-github-pages/configuring-a-publishing-source-for-your-github-pages-site#publishing-with-a-custom-github-actions-workflow

    - name: 'Upload GitHub Pages artifact'
      # https://github.com/actions/upload-pages-artifact
      if: ${{ !cancelled() }}
      uses: actions/upload-pages-artifact@v1
      with:
        path: 'docs/website/_build/html'

    - name: 'Setup GitHub Pages'
      if: ${{ !failure() && inputs.deploy == 'true' }}
      # https://github.com/actions/configure-pages
      uses: actions/configure-pages@v3

    - name: 'Deploy'
      id: deploy
      if: ${{ !failure() && inputs.deploy == 'true' }}
      # https://github.com/actions/deploy-pages
      uses: actions/deploy-pages@v2
#      with:
#        artifact_name: ${{ inputs.artifact-name }}